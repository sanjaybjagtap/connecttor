{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2019-02-14T16:46:18.024227Z",
      "credit": [
        "Mahmoud Gamal",
        "Matias Lang"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 4.0.14, 4.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/755)\n",
      "disclosureTime": "2018-12-28T20:34:57Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.0.14",
        "4.1.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "dist/amd/handlebars/compiler/javascript-compiler.js",
            "functionName": "JavaScriptCompiler.prototype.nameLookup"
          },
          "version": [
            ">1.0.12 <4.0.13"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "dist/handlebars.js",
            "functionName": "JavaScriptCompiler.Handlebars.JavaScriptCompiler"
          },
          "version": [
            ">=1.0.6 <=1.0.12"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "dist/amd/handlebars/compiler/javascript-compiler.js",
            "functionName": "JavaScriptCompiler.prototype.nameLookup"
          },
          "version": [
            ">1.0.12 <4.0.13"
          ]
        },
        {
          "functionId": {
            "filePath": "dist/handlebars.js",
            "functionName": "JavaScriptCompiler.Handlebars.JavaScriptCompiler"
          },
          "version": [
            ">=1.0.6 <=1.0.12"
          ]
        }
      ],
      "id": "SNYK-JS-HANDLEBARS-173692",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-471"
        ],
        "GHSA": [
          "GHSA-6r5x-hmgg-7h53"
        ],
        "NSP": [
          755
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:56.040863Z",
      "moduleName": "handlebars",
      "packageManager": "npm",
      "packageName": "handlebars",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-02-14T17:52:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/wycats/handlebars.js/issues/1495"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/755"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.0.14",
          ">=4.1.0 <4.1.2"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Prototype Pollution",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "handlebars@1.0.12"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "handlebars",
      "version": "1.0.12"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2019-09-25T13:12:40.749568Z",
      "credit": [
        "itszn"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is a extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nTemplates may alter an Object's `__proto__` and `__defineGetter__` properties, which may allow an attacker to execute arbitrary code on the server through crafted payloads.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 4.3.0, 3.8.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6)\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7b67a29a8c926b38af265c727ff6551fbb277111)\n\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1558)\n\n- [Reference](https://www.npmjs.com/advisories/1164)\n\n- [Release Notes](https://github.com/wycats/handlebars.js/blob/master/release-notes.md#v430---september-24th-2019)\n",
      "disclosureTime": "2019-09-24T15:14:43Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.3.0",
        "3.8.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-HANDLEBARS-469063",
      "identifiers": {
        "CVE": [
          "CVE-2019-19919"
        ],
        "CWE": [
          "CWE-471"
        ],
        "NSP": [
          1164
        ]
      },
      "language": "js",
      "modificationTime": "2020-02-27T09:38:25.232243Z",
      "moduleName": "handlebars",
      "packageManager": "npm",
      "packageName": "handlebars",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-09-25T14:33:59Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/wycats/handlebars.js/commit/7b67a29a8c926b38af265c727ff6551fbb277111"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/wycats/handlebars.js/issues/1558"
        },
        {
          "title": "Reference",
          "url": "https://www.npmjs.com/advisories/1164"
        },
        {
          "title": "Release Notes",
          "url": "https://github.com/wycats/handlebars.js/blob/master/release-notes.md%23v430---september-24th-2019"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=4.0.0 <4.3.0",
          "<3.8.0"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Prototype Pollution",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "handlebars@1.0.12"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "handlebars",
      "version": "1.0.12"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2019-11-15T15:45:34.906048Z",
      "credit": [
        "Francois Lajeunesse-Robert"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. The package's lookup helper doesn't validate templates correctly, allowing attackers to submit templates that execute arbitrary JavaScript in the system.\n## Remediation\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\n## References\n- [NPM Security Advisory #1](https://www.npmjs.com/advisories/1316)\n- [NPM Security Advisory #2](https://www.npmjs.com/advisories/1324)\n",
      "disclosureTime": "2019-11-14T15:29:41Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.5.3",
        "3.0.8"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-HANDLEBARS-534478",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-94"
        ],
        "NSP": [
          1316,
          1324
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:37:03.589231Z",
      "moduleName": "handlebars",
      "packageManager": "npm",
      "packageName": "handlebars",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-11-15T15:48:43Z",
      "references": [
        {
          "title": "NPM Security Advisory #1",
          "url": "https://www.npmjs.com/advisories/1316"
        },
        {
          "title": "NPM Security Advisory #2",
          "url": "https://www.npmjs.com/advisories/1324"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=4.0.0 <4.5.3",
          "<3.0.8"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Arbitrary Code Execution",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "handlebars@1.0.12"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "handlebars",
      "version": "1.0.12"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-11-20T09:54:27.277624Z",
      "credit": [
        "Vladyslav Babkin"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nIt is possible to add or modify properties to the Object prototype through a malicious template. This may allow attackers to crash the application or execute Arbitrary Code in specific conditions.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1325)\n",
      "disclosureTime": "2019-11-18T19:42:01Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.5.3",
        "3.0.8"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-HANDLEBARS-534988",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          1325
        ]
      },
      "language": "js",
      "modificationTime": "2020-02-27T09:35:22.610611Z",
      "moduleName": "handlebars",
      "packageManager": "npm",
      "packageName": "handlebars",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-11-20T09:55:17Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/1325"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=4.0.0 <4.5.3",
          "<3.0.8"
        ]
      },
      "severity": "high",
      "severityWithCritical": "critical",
      "title": "Prototype Pollution",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "handlebars@1.0.12"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "handlebars",
      "version": "1.0.12"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-04-28T14:26:34.538485Z",
      "credit": [
        "macasun"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Prototype access to the template engine allows for potential code execution.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `handlebars` to version 4.6.0 or higher.\n## References\n- [GitHub PR](https://github.com/handlebars-lang/handlebars.js/pull/1633)\n- [HackerOne Report](https://hackerone.com/reports/726364)\n",
      "disclosureTime": "2020-04-27T22:13:11Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.6.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-HANDLEBARS-567742",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:37:04.769831Z",
      "moduleName": "handlebars",
      "packageManager": "npm",
      "packageName": "handlebars",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-04-28T14:28:34Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/handlebars-lang/handlebars.js/pull/1633"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/726364"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.6.0"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Prototype Pollution",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "handlebars@1.0.12"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "handlebars",
      "version": "1.0.12"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
      "alternativeIds": [
        "SNYK-JS-HANDLEBARS-10068"
      ],
      "creationTime": "2015-12-14T23:52:16.811000Z",
      "credit": [
        "Matias P. Brutti"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\n [handlebars](https://github.com/wycats/handlebars.js/) provides the power necessary to let you build semantic templates.\r\n\r\nWhen using attributes without quotes in a handlebars template, an attacker can manipulate the input to introduce additional attributes, potentially executing code. This may lead to a Cross-site Scripting (XSS) vulnerability, assuming an attacker can influence the value entered into the template. If the handlebars template is used to render user-generated content, this vulnerability may escalate to a persistent XSS vulnerability.\r\n\r\n## Details\r\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\r\n\r\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\r\n\r\nThere are a few types of XSS:\r\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\r\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\r\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\r\n\r\n\r\n**Example:**\r\n\r\nAssume handlebars was used to display user comments and avatar, using the following template: \r\n`<img src={{avatarUrl}}><pre>{{comment}}</pre>`\r\n\r\nIf an attacker spoofed their avatar URL and provided the following value: \r\n`http://evil.org/avatar.png onload=alert(document.cookie)`\r\n\r\nThe resulting HTML would be the following, triggering the script once the image loads:\r\n`<img src=http://evil.org/avatar.png onload=alert(document.cookie)><pre>Gotcha!</pre>`\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e)",
      "disclosureTime": "2015-12-07T16:52:07Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "4.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/handlebars/utils.js",
            "functionName": "escapeExpression"
          },
          "version": [
            "<4.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/handlebars/utils.js",
            "functionName": "escapeExpression"
          },
          "version": [
            "<4.0.0"
          ]
        }
      ],
      "id": "npm:handlebars:20151207",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-HANDLEBARS-10068"
        ],
        "CVE": [
          "CVE-2015-8861"
        ],
        "CWE": [
          "CWE-79"
        ],
        "NSP": [
          61
        ]
      },
      "language": "js",
      "modificationTime": "2019-02-14T17:52:40.408079Z",
      "moduleName": "handlebars",
      "packageManager": "npm",
      "packageName": "handlebars",
      "patches": [
        {
          "comments": [
            "https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e"
          ],
          "id": "patch:npm:handlebars:20151207:0",
          "modificationTime": "2019-12-03T11:40:45.781030Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/handlebars/20151207/handlebars_0.patch"
          ],
          "version": "<4.0.0 >=3.0.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-12-14T23:52:16Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.0.0"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Cross-site Scripting (XSS)",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "handlebars@1.0.12"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "handlebars",
      "version": "1.0.12"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2019-04-07T06:53:01.452330Z",
      "credit": [
        "Anders Kaseorg"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `inline.text regex` may take quadratic time to scan for potential email addresses starting at every point.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.6.2 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/00f1f7a23916ef27186d0904635aa3509af63d47)\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1460/commits/be27472a8169dda7875330939f8115ab677cdc07)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1460)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/812)\n",
      "disclosureTime": "2019-04-04T20:27:50Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.6.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MARKED-174116",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          812
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:55.625666Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-04-07T06:53:47Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/00f1f7a23916ef27186d0904635aa3509af63d47"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/pull/1460/commits/be27472a8169dda7875330939f8115ab677cdc07"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/markedjs/marked/pull/1460"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/812"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.1.3 <0.6.2"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2019-07-04T15:39:07.026548Z",
      "credit": [
        "Nick Starke",
        "Adam Cazzolla"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A  Denial of Service condition could be triggered through exploitation of the `heading` regex.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/09afabf69c6d0c919c03443f47bdfe476566105d)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1224)\n",
      "disclosureTime": "2018-04-16T15:34:35Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.4.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MARKED-451540",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:56.167484Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-07-04T15:34:22Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/09afabf69c6d0c919c03443f47bdfe476566105d"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/markedjs/marked/pull/1224"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.4.0"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-07-13T15:50:25.938503Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS  ). The `em` regex within `src/rules.js` file have multiple unused capture groups which could lead to a denial of service attack if user input is reachable.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 1.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0)\n",
      "disclosureTime": "2020-07-13T15:47:58Z",
      "exploit": "Unproven",
      "fixedIn": [
        "1.1.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MARKED-584281",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-07-27T15:44:10.510833Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-07-27T15:44:09.661335Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.1.1"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Regular Expression Denial of Service (ReDoS  )",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [
        "SNYK-JS-MARKED-10010"
      ],
      "creationTime": "2014-01-30T22:33:12Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\nMarked comes with an option to sanitize user output to help protect against content injection attacks.\n\nsanitize: true\n\nEven if this option is set, marked is vulnerable to content injection in multiple locations if untrusted user input is allowed to be provided into marked and that output is passed to the browser.\n\nInjection is possible in two locations\n- gfm codeblocks (language)\n- javascript url's\n\n_Source: [Node Security Project](https://nodesecurity.io/advisories/22)_\n\n## Remediation\nUpgrade to version 0.3.1 or later\n\n## References\n\n",
      "disclosureTime": "2014-01-30T22:33:12Z",
      "exploit": "Not Defined",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "npm:marked:20140131",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MARKED-10010"
        ],
        "CVE": [
          "CVE-2014-1850",
          "CVE-2014-3743"
        ],
        "CWE": [
          "CWE-74"
        ],
        "NSP": [
          22
        ]
      },
      "language": "js",
      "modificationTime": "2018-11-20T10:10:11.005775Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2014-01-30T22:33:12Z",
      "references": [],
      "semver": {
        "vulnerable": [
          "<=0.3.0"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Multiple Content Injection Vulnerabilities",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-MARKED-10009"
      ],
      "creationTime": "2014-01-30T22:33:12Z",
      "credit": [
        "Barış Soner Uşaklı"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nwhen certain types of input are passed in to be parsed.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `marked` to version 0.3.4 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/chjj/marked/commit/a37bd643f05bf95ff18cafa2b06e7d741d2e2157)\n\n- [GitHub Issue](https://github.com/chjj/marked/issues/497)\n",
      "disclosureTime": "2014-01-30T22:33:12Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.3.4"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:marked:20140131-1",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MARKED-10009"
        ],
        "CVE": [
          "CVE-2015-8854"
        ],
        "CWE": [
          "CWE-185",
          "CWE-730"
        ],
        "NSP": [
          23
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:29.145044Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [
        {
          "comments": [
            "https://github.com/chjj/marked/commit/a37bd643f05bf95ff18cafa2b06e7d741d2e2157.patch"
          ],
          "id": "patch:npm:marked:20140131-1:0",
          "modificationTime": "2019-12-03T11:40:45.735562Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/marked/20140131-1/marked_20140131-1_0_0_a37bd643f05bf95ff18cafa2b06e7d741d2e2157.patch"
          ],
          "version": "<=0.3.3 >=0.2.8"
        }
      ],
      "proprietary": false,
      "publicationTime": "2014-01-30T22:33:12Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chjj/marked/commit/a37bd643f05bf95ff18cafa2b06e7d741d2e2157"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/chjj/marked/issues/497"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.3.4"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [
        "SNYK-JS-MARKED-10008"
      ],
      "creationTime": "2014-01-30T22:33:12Z",
      "credit": [
        "Xiao Long"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to VBScript Content Injection. `[xss link](vbscript:alert(1&#41;)`\r\n\r\nwill get a link\r\n\r\n`<a href=\"vbscript:alert(1)\">xss link</a>`\r\n\r\nThis script does not work in IE 11 edge mode, but works in IE 10 compatibility view.\n## Remediation\nUpgrade `marked` to version 0.3.3 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/3c191144939107c45a7fa11ab6cb88be6694a1ba)\n- [GitHub Issue](https://github.com/chjj/marked/issues/492)\n- [GitHub Issue](https://github.com/markedjs/marked/issues/492)\n",
      "disclosureTime": "2014-01-30T22:33:12Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.3.3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:marked:20140131-2",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MARKED-10008"
        ],
        "CVE": [
          "CVE-2015-1370"
        ],
        "CWE": [
          "CWE-74"
        ],
        "GHSA": [
          "GHSA-cfjh-p3g4-3q2f"
        ],
        "NSP": [
          24
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:44.331380Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [
        {
          "comments": [
            "https://github.com/chjj/marked/commit/3c191144939107c45a7fa11ab6cb88be6694a1ba.patch"
          ],
          "id": "patch:npm:marked:20140131-2:0",
          "modificationTime": "2019-12-03T11:40:45.734428Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/marked/20140131-2/marked_20140131-2_0_0_3c191144939107c45a7fa11ab6cb88be6694a1ba.patch"
          ],
          "version": "<=0.3.2 >=0.3.1"
        }
      ],
      "proprietary": false,
      "publicationTime": "2014-01-30T22:33:12Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/commit/3c191144939107c45a7fa11ab6cb88be6694a1ba"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/chjj/marked/issues/492"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/markedjs/marked/issues/492"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.3.3"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "VBScript Content Injection",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
      "alternativeIds": [
        "SNYK-JS-MARKED-10377"
      ],
      "creationTime": "2017-01-12T00:00:00.780000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Data URIs enable embedding small files in line in HTML documents, provided in the URL itself.\r\nAttackers can craft malicious web pages containing either HTML or script code that utilizes the data URI scheme, allowing them to bypass access controls or steal sensitive information.\r\n\r\nAn example of data URI used to deliver javascript code. The data holds `<script>alert('XSS')</script>` tag in base64 encoded format.\r\n```html\r\n[xss link](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.7 or higher.\n## References\n- [GitHub Commit](https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51)\n",
      "disclosureTime": "2017-01-12T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.3.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "marked.js",
            "functionName": "Renderer.prototype.link"
          },
          "version": [
            "<0.3.7"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "marked.js",
            "functionName": "Renderer.prototype.link"
          },
          "version": [
            "<0.3.7"
          ]
        }
      ],
      "id": "npm:marked:20170112",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MARKED-10377"
        ],
        "CVE": [
          "CVE-2017-1000427"
        ],
        "CWE": [
          "CWE-79"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:46.828450Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:marked:20170112:0",
          "modificationTime": "2019-12-03T11:40:45.853095Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/marked/20170112/marked_20170112_0_0_cd2f6f5b7091154c5526e79b5f3bfb4d15995a51.patch"
          ],
          "version": "<=0.3.6 >0.3.3"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-01-30T18:00:00Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.3.7"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Cross-site Scripting (XSS)",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
      "alternativeIds": [
        "SNYK-JS-MARKED-10849"
      ],
      "creationTime": "2017-12-04T00:00:00.780000Z",
      "credit": [
        "Andrew Krasichkov"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Browsers support both lowercase and uppercase x in hexadecimal form of HTML character entity, but marked [unescaped only lowercase](https://github.com/chjj/marked/blob/v0.3.7/lib/marked.js#L1096-L1108).\r\n\r\nThis may allow an attacker to create a link with javascript code.\r\n\r\nFor example:\r\n```js\r\nvar marked = require('marked');\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  sanitize: true\r\n});\r\n\r\ntext = `\r\nlower[click me](javascript&#x3a;...)lower\r\nupper[click me](javascript&#X3a;...)upper\r\n`;\r\n\r\nconsole.log(marked(text));\r\n```\r\n\r\nwill render the following:\r\n\r\n```html\r\n<p>lowerlower\r\nupper<a href=\"javascript&#X3a;...\">click me</a>upper</p>\r\n\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/976/commits/6d1901ff71abb83aa32ca9a5ce47471382ea42a9)\n- [GitHub Issue](https://github.com/chjj/marked/issues/925)\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
      "disclosureTime": "2017-08-15T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.3.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:marked:20170815",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MARKED-10849"
        ],
        "CVE": [],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-8wp3-cp9v-44fm"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.990650Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-12-25T15:00:00Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/pull/976/commits/6d1901ff71abb83aa32ca9a5ce47471382ea42a9"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/chjj/marked/issues/925"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chjj/marked/pull/958"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.3.9"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Cross-site Scripting (XSS)",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [
        "SNYK-JS-MARKED-10850"
      ],
      "creationTime": "2017-12-04T00:00:00.780000Z",
      "credit": [
        "Andrew Krasichkov"
      ],
      "cvssScore": 4.8,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). When mangling is disabled via option `mangle`, marked doesn't escape target `href`. This may allow an attacker to inject arbitrary `html-event` into resulting a tag.\r\n\r\nFor example:\r\n```js\r\nvar marked = require('marked');\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  sanitize: true,\r\n  mangle: false\r\n});\r\n\r\ntext = `\r\n<bar\"onclick=\"alert('XSS')\"@foo>\r\n`;\r\n\r\nconsole.log(marked(text));\r\n```\r\n\r\nwill render:\r\n\r\n```html\r\n<p><a href=\"mailto:bar\"onclick=\"alert('XSS')\"@foo\">bar\"onclick=\"alert('XSS')\"@foo</a></p>\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/976/commits/cb72584c5d9d32ebfdbb99e35fb9b81af2b79686)\n- [GitHub Issue](https://github.com/chjj/marked/issues/926)\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
      "disclosureTime": "2017-08-15T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.3.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:marked:20170815-1",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MARKED-10850"
        ],
        "CVE": [],
        "CWE": [
          "CWE-79"
        ],
        "GHSA": [
          "GHSA-wjmf-58vc-xqjr"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.855775Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-12-25T15:00:00Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/pull/976/commits/cb72584c5d9d32ebfdbb99e35fb9b81af2b79686"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/chjj/marked/issues/926"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chjj/marked/pull/958"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.3.9"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Cross-site Scripting (XSS)",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-MARKED-10782"
      ],
      "creationTime": "2017-09-21T08:07:51.834000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nwhen parsing the input markdown content (1,000 characters costs around 6 seconds matching time).\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `marked` to version 0.3.9 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/chjj/marked/issues/937)\n\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
      "disclosureTime": "2017-09-07T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.3.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:marked:20170907",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MARKED-10782"
        ],
        "CVE": [
          "CVE-2017-16114"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          531
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-23T12:50:47.952681Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:marked:20170907:0",
          "modificationTime": "2019-12-03T11:40:45.876422Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/marked/20170907/marked_20170907_0_0_4afb8ce135a1e020e48f7084340333dd0c18229f.patch"
          ],
          "version": "<=0.3.6 >0.3.3"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-21T08:07:51Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/chjj/marked/issues/937"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chjj/marked/pull/958"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.3.9"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [
        "SNYK-JS-MARKED-10990"
      ],
      "creationTime": "2018-02-27T15:06:27.571000Z",
      "credit": [
        "Jamie Davis"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). This can cause an impact of about 10 seconds matching time for data 150 characters long.\r\n\r\n## Disclosure Timeline\r\n* Feb 21th, 2018 - Initial Disclosure to package owner\r\n* Feb 21th, 2018 - Initial Response from package owner\r\n* Feb 26th, 2018 - Fix issued\r\n* Feb 27th, 2018 - Vulnerability published\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.3.18 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1083/commits/b15e42b67cec9ded8505e9d68bb8741ad7a9590d)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1083)\n",
      "disclosureTime": "2018-02-27T15:06:27Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.3.18"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:marked:20180225",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MARKED-10990"
        ],
        "CVE": [],
        "CWE": [
          "CWE-185",
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-xf5p-87ch-gxw2"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:46.804831Z",
      "moduleName": "marked",
      "packageManager": "npm",
      "packageName": "marked",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2018-02-27T16:32:24Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/markedjs/marked/pull/1083/commits/b15e42b67cec9ded8505e9d68bb8741ad7a9590d"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/markedjs/marked/pull/1083"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.3.18"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "marked@0.2.10"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "marked",
      "version": "0.2.10"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L",
      "alternativeIds": [
        "SNYK-JS-UGLIFYJS-10041"
      ],
      "creationTime": "2015-08-24T09:29:10Z",
      "credit": [
        "Tom MacWright"
      ],
      "cvssScore": 8.3,
      "description": "## Overview\r\n[`uglify-js`](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\r\n\r\n[Tom MacWright](https://github.com/mishoo/UglifyJS2/issues/751) discovered that UglifyJS versions 2.4.23 and earlier are affected by a vulnerability which allows a specially crafted Javascript file to have altered functionality after minification. This bug was [demonstrated](https://zyan.scripts.mit.edu/blog/backdooring-js/) by [Yan](https://twitter.com/bcrypt) to allow potentially malicious code to be hidden within secure code, activated by minification.\r\n\r\n### Details\r\nIn Boolean algebra, DeMorgan's laws describe the relationships between conjunctions (`&&`), disjunctions (`||`) and negations (`!`).\r\nIn Javascript form, they state that:\r\n```savascript\r\n !(a && b) === (!a) || (!b)\r\n !(a || b) === (!a) && (!b)\r\n```\r\n\r\nThe law does not hold true when one of the values is not a boolean however.\r\n\r\nVulnerable versions of UglifyJS do not account for this restriction, and erroneously apply the laws to a statement if it can be reduced in length by it.\r\n\r\nConsider this authentication function:\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft =\r\n        !!config && // config object exists\r\n        !!user.token && // user object has a token\r\n        !user.token.invalidated && // token is not explicitly invalidated\r\n        !config.uninitialized && // config is initialized\r\n        !config.ignoreTimestamps && // don't ignore timestamps\r\n        getTimeLeft(user.token.expiry); // > 0 if expiration is in the future\r\n\r\n    // The token must not be expired\r\n    return timeLeft > 0;\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n  return expiry - getSystemTime();\r\n}\r\n```\r\nWhen minified with a vulnerable version of UglifyJS, it will produce the following insecure output, where a token will never expire:\r\n\r\n( Formatted for readability )\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft = !(                       // negation\r\n        !config                             // config object does not exist\r\n        || !user.token                      // user object does not have a token\r\n        || user.token.invalidated           // token is explicitly invalidated\r\n        || config.uninitialized             // config isn't initialized\r\n        || config.ignoreTimestamps          // ignore timestamps\r\n        || !getTimeLeft(user.token.expiry)  // > 0 if expiration is in the future\r\n    );\r\n    return timeLeft > 0\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n    return expiry - getSystemTime()\r\n}\r\n```\r\n\r\n## Remediation\r\nUpgrade UglifyJS to version `2.4.24` or higher.\r\n\r\n## References\r\n- [Blog Post](https://zyan.scripts.mit.edu/blog/backdooring-js/)\r\n- [GitHub Issue](https://github.com/mishoo/UglifyJS2/issues/751)",
      "disclosureTime": "2015-08-24T09:29:10Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.4.24"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/compress.js",
            "functionName": "Compressor"
          },
          "version": [
            ">=2.2.0 <2.4.24"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/compress.js",
            "functionName": "Compressor"
          },
          "version": [
            ">=2.2.0 <2.4.24"
          ]
        }
      ],
      "id": "npm:uglify-js:20150824",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-UGLIFYJS-10041"
        ],
        "CVE": [
          "CVE-2015-8857"
        ],
        "CWE": [
          "CWE-95"
        ],
        "NSP": [
          39
        ]
      },
      "language": "js",
      "modificationTime": "2019-04-30T15:19:20.298795Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:uglify-js:20150824:0",
          "modificationTime": "2019-12-03T11:40:45.756528Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20150824/uglify-js_20150824_0_0_905b6011784ca60d41919ac1a499962b7c1d4b02_snyk.patch"
          ],
          "version": "<= 2.4.23 >2.0.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-08-24T09:29:10Z",
      "references": [
        {
          "title": "Blog Post",
          "url": "https://zyan.scripts.mit.edu/blog/backdooring-js/"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/mishoo/UglifyJS2/issues/751"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=2.2.0 <2.4.24"
        ]
      },
      "severity": "high",
      "severityWithCritical": "high",
      "title": "Improper minification of non-boolean comparisons",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "handlebars@1.0.12",
        "uglify-js@2.3.6"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "uglify-js",
      "version": "2.3.6"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-UGLIFYJS-10059"
      ],
      "creationTime": "2015-11-06T02:09:36.186000Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\nThe `parse()` function in the [`uglify-js`](https://www.npmjs.com/package/uglify-js) package prior to version 2.6.0 is vulnerable to regular expression denial of service (ReDoS) attacks when long inputs of certain patterns are processed.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n## Remediation\r\nUpgrade to version `2.6.0` or greater.\r\nIf a direct dependency update is not possible, use `snyk wizard` to patch this vulnerability.\r\n\r\n## References\r\n- [OWASP - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)",
      "disclosureTime": "2015-10-24T21:01:32Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "id": "npm:uglify-js:20151024",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-UGLIFYJS-10059"
        ],
        "CVE": [
          "CVE-2015-8858"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          48
        ]
      },
      "language": "js",
      "modificationTime": "2019-03-05T10:54:37.391574Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:0",
          "modificationTime": "2019-12-03T11:40:45.767604Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk_inc.patch"
          ],
          "version": "<= 2.4.23 >=2.2.0"
        },
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:1",
          "modificationTime": "2019-12-03T11:40:45.768705Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk.patch"
          ],
          "version": "<2.6.0 >2.4.23"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-11-06T02:09:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mishoo/UglifyJS2/commit/63d35f8f6db6d90d6142132d2d5f0bd5d3d698aa"
        },
        {
          "title": "OWASP - ReDoS",
          "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.0"
        ]
      },
      "severity": "medium",
      "severityWithCritical": "medium",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "jira-vra@0.1.0",
        "cassini@0.1.7",
        "handlebars@1.0.12",
        "uglify-js@2.3.6"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "uglify-js",
      "version": "2.3.6"
    }
  ],
  "ok": false,
  "dependencyCount": 32,
  "org": "dowjonestest",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.19.0\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "ignoreSettings": null,
  "summary": "19 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2019-02-14T16:46:18.024227Z",
        "credit": [
          "Mahmoud Gamal",
          "Matias Lang"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 4.0.14, 4.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/755)\n",
        "disclosureTime": "2018-12-28T20:34:57Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.0.14",
          "4.1.2"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "dist/amd/handlebars/compiler/javascript-compiler.js",
              "functionName": "JavaScriptCompiler.prototype.nameLookup"
            },
            "version": [
              ">1.0.12 <4.0.13"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "dist/handlebars.js",
              "functionName": "JavaScriptCompiler.Handlebars.JavaScriptCompiler"
            },
            "version": [
              ">=1.0.6 <=1.0.12"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "dist/amd/handlebars/compiler/javascript-compiler.js",
              "functionName": "JavaScriptCompiler.prototype.nameLookup"
            },
            "version": [
              ">1.0.12 <4.0.13"
            ]
          },
          {
            "functionId": {
              "filePath": "dist/handlebars.js",
              "functionName": "JavaScriptCompiler.Handlebars.JavaScriptCompiler"
            },
            "version": [
              ">=1.0.6 <=1.0.12"
            ]
          }
        ],
        "id": "SNYK-JS-HANDLEBARS-173692",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-471"
          ],
          "GHSA": [
            "GHSA-6r5x-hmgg-7h53"
          ],
          "NSP": [
            755
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:56.040863Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-02-14T17:52:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/wycats/handlebars.js/issues/1495"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/755"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.14",
            ">=4.1.0 <4.1.2"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "handlebars@1.0.12"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "1.0.12"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2019-09-25T13:12:40.749568Z",
        "credit": [
          "itszn"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is a extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nTemplates may alter an Object's `__proto__` and `__defineGetter__` properties, which may allow an attacker to execute arbitrary code on the server through crafted payloads.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 4.3.0, 3.8.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6)\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7b67a29a8c926b38af265c727ff6551fbb277111)\n\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1558)\n\n- [Reference](https://www.npmjs.com/advisories/1164)\n\n- [Release Notes](https://github.com/wycats/handlebars.js/blob/master/release-notes.md#v430---september-24th-2019)\n",
        "disclosureTime": "2019-09-24T15:14:43Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.3.0",
          "3.8.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HANDLEBARS-469063",
        "identifiers": {
          "CVE": [
            "CVE-2019-19919"
          ],
          "CWE": [
            "CWE-471"
          ],
          "NSP": [
            1164
          ]
        },
        "language": "js",
        "modificationTime": "2020-02-27T09:38:25.232243Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-09-25T14:33:59Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/7b67a29a8c926b38af265c727ff6551fbb277111"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/wycats/handlebars.js/issues/1558"
          },
          {
            "title": "Reference",
            "url": "https://www.npmjs.com/advisories/1164"
          },
          {
            "title": "Release Notes",
            "url": "https://github.com/wycats/handlebars.js/blob/master/release-notes.md%23v430---september-24th-2019"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=4.0.0 <4.3.0",
            "<3.8.0"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "handlebars@1.0.12"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "1.0.12"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2019-11-15T15:45:34.906048Z",
        "credit": [
          "Francois Lajeunesse-Robert"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. The package's lookup helper doesn't validate templates correctly, allowing attackers to submit templates that execute arbitrary JavaScript in the system.\n## Remediation\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\n## References\n- [NPM Security Advisory #1](https://www.npmjs.com/advisories/1316)\n- [NPM Security Advisory #2](https://www.npmjs.com/advisories/1324)\n",
        "disclosureTime": "2019-11-14T15:29:41Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.5.3",
          "3.0.8"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HANDLEBARS-534478",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-94"
          ],
          "NSP": [
            1316,
            1324
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:37:03.589231Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-11-15T15:48:43Z",
        "references": [
          {
            "title": "NPM Security Advisory #1",
            "url": "https://www.npmjs.com/advisories/1316"
          },
          {
            "title": "NPM Security Advisory #2",
            "url": "https://www.npmjs.com/advisories/1324"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=4.0.0 <4.5.3",
            "<3.0.8"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Arbitrary Code Execution",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "handlebars@1.0.12"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "1.0.12"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-11-20T09:54:27.277624Z",
        "credit": [
          "Vladyslav Babkin"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nIt is possible to add or modify properties to the Object prototype through a malicious template. This may allow attackers to crash the application or execute Arbitrary Code in specific conditions.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1325)\n",
        "disclosureTime": "2019-11-18T19:42:01Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.5.3",
          "3.0.8"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HANDLEBARS-534988",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            1325
          ]
        },
        "language": "js",
        "modificationTime": "2020-02-27T09:35:22.610611Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-11-20T09:55:17Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/1325"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=4.0.0 <4.5.3",
            "<3.0.8"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Prototype Pollution",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "handlebars@1.0.12"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "1.0.12"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-04-28T14:26:34.538485Z",
        "credit": [
          "macasun"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Prototype access to the template engine allows for potential code execution.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `handlebars` to version 4.6.0 or higher.\n## References\n- [GitHub PR](https://github.com/handlebars-lang/handlebars.js/pull/1633)\n- [HackerOne Report](https://hackerone.com/reports/726364)\n",
        "disclosureTime": "2020-04-27T22:13:11Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.6.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HANDLEBARS-567742",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:37:04.769831Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-04-28T14:28:34Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/handlebars-lang/handlebars.js/pull/1633"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/726364"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.6.0"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "handlebars@1.0.12"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "1.0.12"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [
          "SNYK-JS-HANDLEBARS-10068"
        ],
        "creationTime": "2015-12-14T23:52:16.811000Z",
        "credit": [
          "Matias P. Brutti"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n [handlebars](https://github.com/wycats/handlebars.js/) provides the power necessary to let you build semantic templates.\r\n\r\nWhen using attributes without quotes in a handlebars template, an attacker can manipulate the input to introduce additional attributes, potentially executing code. This may lead to a Cross-site Scripting (XSS) vulnerability, assuming an attacker can influence the value entered into the template. If the handlebars template is used to render user-generated content, this vulnerability may escalate to a persistent XSS vulnerability.\r\n\r\n## Details\r\nCross-Site Scripting (XSS) attacks occur when an attacker tricks a user’s browser to execute malicious JavaScript code in the context of a victim’s domain. Such scripts can steal the user’s session cookies for the domain, scrape or modify its content, and perform or modify actions on the user’s behalf, actions typically blocked by the browser’s Same Origin Policy.\r\n\r\nThese attacks are possible by escaping the context of the web application and injecting malicious scripts in an otherwise trusted website. These scripts can introduce additional attributes (say, a \"new\" option in a dropdown list or a new link to a malicious site) and can potentially execute code on the clients side, unbeknown to the victim. This occurs when characters like `<` `>` `\"` `'` are not escaped properly.\r\n\r\nThere are a few types of XSS:\r\n- **Persistent XSS** is an attack in which the malicious code persists into the web app’s database.\r\n- **Reflected XSS** is an which the website echoes back a portion of the request. The attacker needs to trick the user into clicking a malicious link (for instance through a phishing email or malicious JS on another page), which triggers the XSS attack.\r\n- **DOM-based XSS** is an that occurs purely in the browser when client-side JavaScript echoes back a portion of the URL onto the page. DOM-Based XSS is notoriously hard to detect, as the server never gets a chance to see the attack taking place.\r\n\r\n\r\n**Example:**\r\n\r\nAssume handlebars was used to display user comments and avatar, using the following template: \r\n`<img src={{avatarUrl}}><pre>{{comment}}</pre>`\r\n\r\nIf an attacker spoofed their avatar URL and provided the following value: \r\n`http://evil.org/avatar.png onload=alert(document.cookie)`\r\n\r\nThe resulting HTML would be the following, triggering the script once the image loads:\r\n`<img src=http://evil.org/avatar.png onload=alert(document.cookie)><pre>Gotcha!</pre>`\r\n\r\n## References\r\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e)",
        "disclosureTime": "2015-12-07T16:52:07Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.0.0"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/handlebars/utils.js",
              "functionName": "escapeExpression"
            },
            "version": [
              "<4.0.0"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/handlebars/utils.js",
              "functionName": "escapeExpression"
            },
            "version": [
              "<4.0.0"
            ]
          }
        ],
        "id": "npm:handlebars:20151207",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-HANDLEBARS-10068"
          ],
          "CVE": [
            "CVE-2015-8861"
          ],
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            61
          ]
        },
        "language": "js",
        "modificationTime": "2019-02-14T17:52:40.408079Z",
        "moduleName": "handlebars",
        "packageManager": "npm",
        "packageName": "handlebars",
        "patches": [
          {
            "comments": [
              "https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e"
            ],
            "id": "patch:npm:handlebars:20151207:0",
            "modificationTime": "2019-12-03T11:40:45.781030Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/handlebars/20151207/handlebars_0.patch"
            ],
            "version": "<4.0.0 >=3.0.2"
          }
        ],
        "proprietary": false,
        "publicationTime": "2015-12-14T23:52:16Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.0.0"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "handlebars@1.0.12"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "handlebars",
        "version": "1.0.12"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2019-04-07T06:53:01.452330Z",
        "credit": [
          "Anders Kaseorg"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `inline.text regex` may take quadratic time to scan for potential email addresses starting at every point.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.6.2 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/00f1f7a23916ef27186d0904635aa3509af63d47)\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1460/commits/be27472a8169dda7875330939f8115ab677cdc07)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1460)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/812)\n",
        "disclosureTime": "2019-04-04T20:27:50Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.6.2"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-MARKED-174116",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            812
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:55.625666Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-04-07T06:53:47Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/markedjs/marked/commit/00f1f7a23916ef27186d0904635aa3509af63d47"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/markedjs/marked/pull/1460/commits/be27472a8169dda7875330939f8115ab677cdc07"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/markedjs/marked/pull/1460"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/812"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=0.1.3 <0.6.2"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "marked@0.2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "marked",
        "version": "0.2.10"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2019-07-04T15:39:07.026548Z",
        "credit": [
          "Nick Starke",
          "Adam Cazzolla"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A  Denial of Service condition could be triggered through exploitation of the `heading` regex.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/09afabf69c6d0c919c03443f47bdfe476566105d)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1224)\n",
        "disclosureTime": "2018-04-16T15:34:35Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.4.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-MARKED-451540",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:56.167484Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-07-04T15:34:22Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/markedjs/marked/commit/09afabf69c6d0c919c03443f47bdfe476566105d"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/markedjs/marked/pull/1224"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.4.0"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "marked@0.2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "marked",
        "version": "0.2.10"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-07-13T15:50:25.938503Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS  ). The `em` regex within `src/rules.js` file have multiple unused capture groups which could lead to a denial of service attack if user input is reachable.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 1.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0)\n",
        "disclosureTime": "2020-07-13T15:47:58Z",
        "exploit": "Unproven",
        "fixedIn": [
          "1.1.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-MARKED-584281",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-07-27T15:44:10.510833Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-07-27T15:44:09.661335Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.1.1"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Regular Expression Denial of Service (ReDoS  )",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "marked@0.2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "marked",
        "version": "0.2.10"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [
          "SNYK-JS-MARKED-10010"
        ],
        "creationTime": "2014-01-30T22:33:12Z",
        "credit": [
          "Adam Baldwin"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\nMarked comes with an option to sanitize user output to help protect against content injection attacks.\n\nsanitize: true\n\nEven if this option is set, marked is vulnerable to content injection in multiple locations if untrusted user input is allowed to be provided into marked and that output is passed to the browser.\n\nInjection is possible in two locations\n- gfm codeblocks (language)\n- javascript url's\n\n_Source: [Node Security Project](https://nodesecurity.io/advisories/22)_\n\n## Remediation\nUpgrade to version 0.3.1 or later\n\n## References\n\n",
        "disclosureTime": "2014-01-30T22:33:12Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "npm:marked:20140131",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10010"
          ],
          "CVE": [
            "CVE-2014-1850",
            "CVE-2014-3743"
          ],
          "CWE": [
            "CWE-74"
          ],
          "NSP": [
            22
          ]
        },
        "language": "js",
        "modificationTime": "2018-11-20T10:10:11.005775Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2014-01-30T22:33:12Z",
        "references": [],
        "semver": {
          "vulnerable": [
            "<=0.3.0"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Multiple Content Injection Vulnerabilities",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "marked@0.2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "marked",
        "version": "0.2.10"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [
          "SNYK-JS-MARKED-10008"
        ],
        "creationTime": "2014-01-30T22:33:12Z",
        "credit": [
          "Xiao Long"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to VBScript Content Injection. `[xss link](vbscript:alert(1&#41;)`\r\n\r\nwill get a link\r\n\r\n`<a href=\"vbscript:alert(1)\">xss link</a>`\r\n\r\nThis script does not work in IE 11 edge mode, but works in IE 10 compatibility view.\n## Remediation\nUpgrade `marked` to version 0.3.3 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/3c191144939107c45a7fa11ab6cb88be6694a1ba)\n- [GitHub Issue](https://github.com/chjj/marked/issues/492)\n- [GitHub Issue](https://github.com/markedjs/marked/issues/492)\n",
        "disclosureTime": "2014-01-30T22:33:12Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.3.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:marked:20140131-2",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10008"
          ],
          "CVE": [
            "CVE-2015-1370"
          ],
          "CWE": [
            "CWE-74"
          ],
          "GHSA": [
            "GHSA-cfjh-p3g4-3q2f"
          ],
          "NSP": [
            24
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:44.331380Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [
          {
            "comments": [
              "https://github.com/chjj/marked/commit/3c191144939107c45a7fa11ab6cb88be6694a1ba.patch"
            ],
            "id": "patch:npm:marked:20140131-2:0",
            "modificationTime": "2019-12-03T11:40:45.734428Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/marked/20140131-2/marked_20140131-2_0_0_3c191144939107c45a7fa11ab6cb88be6694a1ba.patch"
            ],
            "version": "<=0.3.2 >=0.3.1"
          }
        ],
        "proprietary": false,
        "publicationTime": "2014-01-30T22:33:12Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/markedjs/marked/commit/3c191144939107c45a7fa11ab6cb88be6694a1ba"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/chjj/marked/issues/492"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/markedjs/marked/issues/492"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "VBScript Content Injection",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "marked@0.2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "marked",
        "version": "0.2.10"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [
          "SNYK-JS-MARKED-10377"
        ],
        "creationTime": "2017-01-12T00:00:00.780000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Data URIs enable embedding small files in line in HTML documents, provided in the URL itself.\r\nAttackers can craft malicious web pages containing either HTML or script code that utilizes the data URI scheme, allowing them to bypass access controls or steal sensitive information.\r\n\r\nAn example of data URI used to deliver javascript code. The data holds `<script>alert('XSS')</script>` tag in base64 encoded format.\r\n```html\r\n[xss link](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.7 or higher.\n## References\n- [GitHub Commit](https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51)\n",
        "disclosureTime": "2017-01-12T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.3.7"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "marked.js",
              "functionName": "Renderer.prototype.link"
            },
            "version": [
              "<0.3.7"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "marked.js",
              "functionName": "Renderer.prototype.link"
            },
            "version": [
              "<0.3.7"
            ]
          }
        ],
        "id": "npm:marked:20170112",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10377"
          ],
          "CVE": [
            "CVE-2017-1000427"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:46.828450Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:marked:20170112:0",
            "modificationTime": "2019-12-03T11:40:45.853095Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/marked/20170112/marked_20170112_0_0_cd2f6f5b7091154c5526e79b5f3bfb4d15995a51.patch"
            ],
            "version": "<=0.3.6 >0.3.3"
          }
        ],
        "proprietary": true,
        "publicationTime": "2017-01-30T18:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.7"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "marked@0.2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "marked",
        "version": "0.2.10"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [
          "SNYK-JS-MARKED-10849"
        ],
        "creationTime": "2017-12-04T00:00:00.780000Z",
        "credit": [
          "Andrew Krasichkov"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Browsers support both lowercase and uppercase x in hexadecimal form of HTML character entity, but marked [unescaped only lowercase](https://github.com/chjj/marked/blob/v0.3.7/lib/marked.js#L1096-L1108).\r\n\r\nThis may allow an attacker to create a link with javascript code.\r\n\r\nFor example:\r\n```js\r\nvar marked = require('marked');\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  sanitize: true\r\n});\r\n\r\ntext = `\r\nlower[click me](javascript&#x3a;...)lower\r\nupper[click me](javascript&#X3a;...)upper\r\n`;\r\n\r\nconsole.log(marked(text));\r\n```\r\n\r\nwill render the following:\r\n\r\n```html\r\n<p>lowerlower\r\nupper<a href=\"javascript&#X3a;...\">click me</a>upper</p>\r\n\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/976/commits/6d1901ff71abb83aa32ca9a5ce47471382ea42a9)\n- [GitHub Issue](https://github.com/chjj/marked/issues/925)\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
        "disclosureTime": "2017-08-15T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.3.9"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:marked:20170815",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10849"
          ],
          "CVE": [],
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-8wp3-cp9v-44fm"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:53.990650Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-12-25T15:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/markedjs/marked/pull/976/commits/6d1901ff71abb83aa32ca9a5ce47471382ea42a9"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/chjj/marked/issues/925"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/chjj/marked/pull/958"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.9"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "marked@0.2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "marked",
        "version": "0.2.10"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [
          "SNYK-JS-MARKED-10850"
        ],
        "creationTime": "2017-12-04T00:00:00.780000Z",
        "credit": [
          "Andrew Krasichkov"
        ],
        "cvssScore": 4.8,
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). When mangling is disabled via option `mangle`, marked doesn't escape target `href`. This may allow an attacker to inject arbitrary `html-event` into resulting a tag.\r\n\r\nFor example:\r\n```js\r\nvar marked = require('marked');\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  sanitize: true,\r\n  mangle: false\r\n});\r\n\r\ntext = `\r\n<bar\"onclick=\"alert('XSS')\"@foo>\r\n`;\r\n\r\nconsole.log(marked(text));\r\n```\r\n\r\nwill render:\r\n\r\n```html\r\n<p><a href=\"mailto:bar\"onclick=\"alert('XSS')\"@foo\">bar\"onclick=\"alert('XSS')\"@foo</a></p>\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/976/commits/cb72584c5d9d32ebfdbb99e35fb9b81af2b79686)\n- [GitHub Issue](https://github.com/chjj/marked/issues/926)\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
        "disclosureTime": "2017-08-15T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.3.9"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:marked:20170815-1",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10850"
          ],
          "CVE": [],
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-wjmf-58vc-xqjr"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:53.855775Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-12-25T15:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/markedjs/marked/pull/976/commits/cb72584c5d9d32ebfdbb99e35fb9b81af2b79686"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/chjj/marked/issues/926"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/chjj/marked/pull/958"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.9"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "marked@0.2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "marked",
        "version": "0.2.10"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-MARKED-10782"
        ],
        "creationTime": "2017-09-21T08:07:51.834000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nwhen parsing the input markdown content (1,000 characters costs around 6 seconds matching time).\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `marked` to version 0.3.9 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/chjj/marked/issues/937)\n\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
        "disclosureTime": "2017-09-07T21:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.3.9"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:marked:20170907",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10782"
          ],
          "CVE": [
            "CVE-2017-16114"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            531
          ]
        },
        "language": "js",
        "modificationTime": "2019-12-23T12:50:47.952681Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:marked:20170907:0",
            "modificationTime": "2019-12-03T11:40:45.876422Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/marked/20170907/marked_20170907_0_0_4afb8ce135a1e020e48f7084340333dd0c18229f.patch"
            ],
            "version": "<=0.3.6 >0.3.3"
          }
        ],
        "proprietary": false,
        "publicationTime": "2017-09-21T08:07:51Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/chjj/marked/issues/937"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/chjj/marked/pull/958"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.9"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "marked@0.2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "marked",
        "version": "0.2.10"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-MARKED-10990"
        ],
        "creationTime": "2018-02-27T15:06:27.571000Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). This can cause an impact of about 10 seconds matching time for data 150 characters long.\r\n\r\n## Disclosure Timeline\r\n* Feb 21th, 2018 - Initial Disclosure to package owner\r\n* Feb 21th, 2018 - Initial Response from package owner\r\n* Feb 26th, 2018 - Fix issued\r\n* Feb 27th, 2018 - Vulnerability published\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.3.18 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1083/commits/b15e42b67cec9ded8505e9d68bb8741ad7a9590d)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1083)\n",
        "disclosureTime": "2018-02-27T15:06:27Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.3.18"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:marked:20180225",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MARKED-10990"
          ],
          "CVE": [],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-xf5p-87ch-gxw2"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:46.804831Z",
        "moduleName": "marked",
        "packageManager": "npm",
        "packageName": "marked",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2018-02-27T16:32:24Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/markedjs/marked/pull/1083/commits/b15e42b67cec9ded8505e9d68bb8741ad7a9590d"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/markedjs/marked/pull/1083"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.3.18"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "marked@0.2.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "marked",
        "version": "0.2.10"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L",
        "alternativeIds": [
          "SNYK-JS-UGLIFYJS-10041"
        ],
        "creationTime": "2015-08-24T09:29:10Z",
        "credit": [
          "Tom MacWright"
        ],
        "cvssScore": 8.3,
        "description": "## Overview\r\n[`uglify-js`](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\r\n\r\n[Tom MacWright](https://github.com/mishoo/UglifyJS2/issues/751) discovered that UglifyJS versions 2.4.23 and earlier are affected by a vulnerability which allows a specially crafted Javascript file to have altered functionality after minification. This bug was [demonstrated](https://zyan.scripts.mit.edu/blog/backdooring-js/) by [Yan](https://twitter.com/bcrypt) to allow potentially malicious code to be hidden within secure code, activated by minification.\r\n\r\n### Details\r\nIn Boolean algebra, DeMorgan's laws describe the relationships between conjunctions (`&&`), disjunctions (`||`) and negations (`!`).\r\nIn Javascript form, they state that:\r\n```savascript\r\n !(a && b) === (!a) || (!b)\r\n !(a || b) === (!a) && (!b)\r\n```\r\n\r\nThe law does not hold true when one of the values is not a boolean however.\r\n\r\nVulnerable versions of UglifyJS do not account for this restriction, and erroneously apply the laws to a statement if it can be reduced in length by it.\r\n\r\nConsider this authentication function:\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft =\r\n        !!config && // config object exists\r\n        !!user.token && // user object has a token\r\n        !user.token.invalidated && // token is not explicitly invalidated\r\n        !config.uninitialized && // config is initialized\r\n        !config.ignoreTimestamps && // don't ignore timestamps\r\n        getTimeLeft(user.token.expiry); // > 0 if expiration is in the future\r\n\r\n    // The token must not be expired\r\n    return timeLeft > 0;\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n  return expiry - getSystemTime();\r\n}\r\n```\r\nWhen minified with a vulnerable version of UglifyJS, it will produce the following insecure output, where a token will never expire:\r\n\r\n( Formatted for readability )\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft = !(                       // negation\r\n        !config                             // config object does not exist\r\n        || !user.token                      // user object does not have a token\r\n        || user.token.invalidated           // token is explicitly invalidated\r\n        || config.uninitialized             // config isn't initialized\r\n        || config.ignoreTimestamps          // ignore timestamps\r\n        || !getTimeLeft(user.token.expiry)  // > 0 if expiration is in the future\r\n    );\r\n    return timeLeft > 0\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n    return expiry - getSystemTime()\r\n}\r\n```\r\n\r\n## Remediation\r\nUpgrade UglifyJS to version `2.4.24` or higher.\r\n\r\n## References\r\n- [Blog Post](https://zyan.scripts.mit.edu/blog/backdooring-js/)\r\n- [GitHub Issue](https://github.com/mishoo/UglifyJS2/issues/751)",
        "disclosureTime": "2015-08-24T09:29:10Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.4.24"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/compress.js",
              "functionName": "Compressor"
            },
            "version": [
              ">=2.2.0 <2.4.24"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/compress.js",
              "functionName": "Compressor"
            },
            "version": [
              ">=2.2.0 <2.4.24"
            ]
          }
        ],
        "id": "npm:uglify-js:20150824",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-UGLIFYJS-10041"
          ],
          "CVE": [
            "CVE-2015-8857"
          ],
          "CWE": [
            "CWE-95"
          ],
          "NSP": [
            39
          ]
        },
        "language": "js",
        "modificationTime": "2019-04-30T15:19:20.298795Z",
        "moduleName": "uglify-js",
        "packageManager": "npm",
        "packageName": "uglify-js",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:uglify-js:20150824:0",
            "modificationTime": "2019-12-03T11:40:45.756528Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20150824/uglify-js_20150824_0_0_905b6011784ca60d41919ac1a499962b7c1d4b02_snyk.patch"
            ],
            "version": "<= 2.4.23 >2.0.0"
          }
        ],
        "proprietary": false,
        "publicationTime": "2015-08-24T09:29:10Z",
        "references": [
          {
            "title": "Blog Post",
            "url": "https://zyan.scripts.mit.edu/blog/backdooring-js/"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/mishoo/UglifyJS2/issues/751"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=2.2.0 <2.4.24"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Improper minification of non-boolean comparisons",
        "from": [
          "jira-vra@0.1.0",
          "cassini@0.1.7",
          "handlebars@1.0.12",
          "uglify-js@2.3.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": true,
        "isPinnable": false,
        "name": "uglify-js",
        "version": "2.3.6"
      }
    ],
    "upgrade": {},
    "patch": {
      "npm:marked:20140131-1": {
        "paths": [
          {
            "cassini > marked": {
              "patched": "2020-11-24T02:11:12.107Z"
            }
          }
        ]
      },
      "npm:uglify-js:20151024": {
        "paths": [
          {
            "cassini > handlebars > uglify-js": {
              "patched": "2020-11-24T02:11:12.107Z"
            }
          }
        ]
      }
    },
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 19,
  "projectName": "jira-vra",
  "displayTargetFile": "package-lock.json",
  "path": "/Users/sambandank/secops/jirapy/jira-vra"
}