{"version":3,"sources":["components/TransactionTable.js","components/ServerInfo.js","components/DataView.js","components/Spinner.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["TransactionTable","props","rows","values","Object","this","data","concat","sort","a","b","recievedTimeForDisplay","localeCompare","map","item","i","getTxnObject","length","push","colSpan","Container","fluid","Table","striped","bordered","hover","responsive","varient","txmObject","count","lt","exceptionObj","stack","Accordion","defaultActiveKey","style","minWidth","maxWidth","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","m","maxHeight","TransactionId","value","status","remoteActionMessageBean","moduleName","actionName","inbound","message","connectionId","sync","toString","userId","processingCompleteTimeForDisplay","timeTookForProcessing","txnId","React","Component","fontColor","color","sourceServer","JSONDisplayer","obj","children","JSON","stringify","replace","ServerInfo","Jumbotron","onClick","refreshHome","CardDeck","marginTop","Title","Text","className","title","DataView","mode","txn","cdr","events","entry","getEventObject","serverinfo","recievedTime","processingCompleteTime","eventobj","console","log","split","inserLineBreak","methods","replaceAll","md","Spinner","showloader","role","Navbar","bg","expand","Brand","href","aria-controls","id","Nav","Link","homeClick","NavDropdown","Item","avaliableEvents","transactionHistoryClick","Divider","logoutClick","App","state","transactions","screen","availableEvents","avaliableEventsHandleClick","setState","getAvailableEvents","getServerInfo","getTransactionHistory","logout","axios","get","then","res","window","open","info","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fc9bdf5.chunk.js","sourcesContent":["import React from 'react'\r\nimport Table from 'react-bootstrap/Table';\r\nimport { Container } from 'react-bootstrap';\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass TransactionTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n            let Y = 1;\r\n            let values = Object.values(this.props.data);\r\n            debugger;\r\n            rows = [].concat(values)\r\n            .sort((a, b) => a.recievedTimeForDisplay.localeCompare(b.recievedTimeForDisplay))\r\n            .map((item, i) => \r\n                this.getTxnObject(item, i+1)\r\n            );\r\n\r\n            if(rows.length==0) {\r\n                rows.push(<tr key='no_data'><td colSpan={5}><center>No data</center></td></tr>)\r\n            }\r\n\r\n        return(\r\n        <Container fluid>\r\n            <Table striped bordered hover responsive varient=\"dark\">\r\n                <thead>\r\n                    <tr key='title_1'>\r\n                    <th>#</th>\r\n                    <th>Source/Transaction ID</th>\r\n                    <th>Transaction Status</th>\r\n                    <th>Data</th>\r\n                    <th>Timing</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows}\r\n                </tbody>\r\n            </Table>\r\n        </Container>\r\n        );\r\n    }\r\n\r\n    getTxnObject(txmObject,count) {\r\n        let exceptionObj = '';\r\n        let stack = txmObject['exceptionStack'];\r\n        let lt;\r\n        if(stack != null) {\r\n            for(lt of stack){\r\n                exceptionObj+= <br>{lt}</br>\r\n            }\r\n            exceptionObj =  (<Accordion defaultActiveKey=\"5\" fluid style={{minWidth: '18rem', maxWidth:'30rem'}}>\r\n                            <Card>\r\n                                <Card.Header>\r\n                                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                                        Exception Stack\r\n                                    </Accordion.Toggle>\r\n                                </Card.Header>\r\n                                <Accordion.Collapse eventKey=\"0\">\r\n                                    <Card.Body fluid>\r\n                                        {stack.map((m,i) => <span key={'message-${i}'}><i>{m}</i><br /></span>)}\r\n                                        ......\r\n                                    </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>)\r\n        }\r\n        return(<tr key={txmObject.txnId} style={{maxHeight:'10rem'}}>\r\n            <td>{count}</td>\r\n            <td>\r\n                <TransactionId value={txmObject}></TransactionId>\r\n            </td>\r\n            <td>\r\n                {txmObject.status}\r\n            </td>\r\n            <td style={{minWidth: '18rem', maxWidth:'33rem', maxHeight:'20rem'}}>\r\n                <ul>\r\n                    <li>\r\n                        Module Name : <b>{txmObject.remoteActionMessageBean.moduleName} </b>\r\n                    </li>\r\n                    <li>\r\n                        Action : <b>{txmObject.remoteActionMessageBean.actionName}</b>\r\n                    </li>\r\n                </ul>\r\n                <Accordion defaultActiveKey=\"5\" style={{minWidth: '18rem', maxWidth:'30rem'}}>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                                    Incoming Message\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body><JSONDisplayer>{txmObject.inbound}</JSONDisplayer></Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                    Reply Message\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <Card.Body>\r\n                                    <JSONDisplayer>\r\n                                        {txmObject.remoteActionMessageBean.message}\r\n                                    </JSONDisplayer>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n\r\n                    <Accordion defaultActiveKey=\"5\" style={{minWidth: '18rem', maxWidth:'30rem'}}>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                                    Message info\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body>\r\n                                    <ul>\r\n \r\n                                        <li>\r\n                                            Connection ID : {txmObject.remoteActionMessageBean.connectionId} \r\n                                        </li>\r\n                                        <li>\r\n                                            Sync Txn : {txmObject.remoteActionMessageBean.sync.toString()}\r\n                                        </li>\r\n                                        <li>\r\n                                            User ID : {txmObject.remoteActionMessageBean.userId} \r\n                                        </li>\r\n                                        <li>\r\n                                        Message Fate : {txmObject.remoteActionMessageBean.status} \r\n                                        </li>\r\n                                    </ul>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n\r\n                    {exceptionObj}\r\n  \r\n            </td>\r\n            <td>\r\n                <ul>\r\n                    <li>\r\n                        Start time : {txmObject.recievedTimeForDisplay} \r\n                    </li>\r\n                    <li>\r\n                        End time : {txmObject.processingCompleteTimeForDisplay}\r\n                    </li>\r\n                    <li>\r\n                        Processing duration : {txmObject.timeTookForProcessing} \r\n                    </li>\r\n                </ul>\r\n            </td>\r\n        </tr>);\r\n    }\r\n\r\n}\r\n\r\nfunction TransactionId({value}) {\r\n    let fontColor = 'black';\r\n    if(value.remoteActionMessageBean.status === 'FAILED') {\r\n        fontColor = 'red';\r\n    }\r\n    return(<span style={{color: fontColor}}>{value.sourceServer} <br/>{value.txnId}</span>)\r\n}\r\n\r\nconst getJsonIndented = (obj) => JSON.stringify(obj, null, 4).replace(/[\"{[,\\}\\]]/g, \"\")\r\n\r\nconst JSONDisplayer = ({children}) => (\r\n    <div>\r\n        <pre>{getJsonIndented(children)}</pre>\r\n    </div>\r\n)\r\n\r\n\r\nexport default TransactionTable;","import React from 'react'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport { Container } from 'react-bootstrap';\r\n\r\nclass ServerInfo extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Jumbotron>\r\n                    <h1>OCB Connector Server WS</h1>\r\n                    <p>\r\n                        This is the monitoring console of the CN server node.\r\n                    </p>\r\n                    <p>\r\n                        <Button variant=\"primary\" onClick={()=>{this.props.refreshHome()}}>Refresh</Button>\r\n                    </p>\r\n                </Jumbotron>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <Card.Header>Quick Status</Card.Header>\r\n                        <Card.Body>\r\n                            <CardDeck>\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>VM Runtime</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['vmname']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>VM Vendor</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['vmvendor']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Runtime version</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['rtversion']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                                \r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Node name</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['nodename']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Process PID</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['vmpid']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>DB Pool name</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbpoolname']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>DB Max lifetime</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbmaxlifetime']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>DB pool max size</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbsize']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>DB active connections</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbactive']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>DB idle connections</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbidle']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Threads awaiting connections</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbawaiting']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Incoming m-queue size</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['inQSize']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Incoming m-queue remaing capacity</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['inQRemaining']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Outgoing m-queue size</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['outQSize']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Outgoing m-queue remaing capacity</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['outQRemaining']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Active WS Connections</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['activeConnection']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Sender threadpool size</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['outTPTotal']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Sender threadpool active</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['outTPActive']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n       \r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Reciever threadpool size</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['inTPTotal']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Reciever threadpool active</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['inTPActive']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </CardDeck>\r\n\r\n                            <footer className=\"blockquote-footer\">\r\n                                SAP SE <cite title=\"Source Title\">FSI</cite>\r\n                            </footer>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ServerInfo;","import React from 'react'\r\nimport { Container } from 'react-bootstrap';\r\nimport TransactionTable from './TransactionTable.js';\r\nimport Table from 'react-bootstrap/Table';\r\nimport ServerInfo from './ServerInfo.js'\r\n\r\nclass DataView extends React.Component {\r\nconstructor(props) {\r\n    super(props);\r\n}\r\n\r\n    render() {\r\n        if(this.props.mode == 'txns') {\r\n            return(<TransactionTable data={this.props.txn}/>);\r\n        } else if(this.props.mode == 'events'){\r\n            let rows = [];\r\n            let i = 1;\r\n            var cdr = this.props.events.sort();\r\n            for (let entry of cdr) {\r\n                rows.push(this.getEventObject(entry,i));\r\n                i++;\r\n            }\r\n            return(\r\n            <Container fluid>\r\n                <Table striped bordered hover responsive varient=\"dark\">\r\n                    <thead>\r\n                        <tr key='title_2'>\r\n                            <th>#</th>\r\n                            <th>Event Module</th>\r\n                            <th>Event Action name</th>\r\n                            <th>Target class</th>\r\n                            <th>Arguments</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </Table>\r\n            </Container>);\r\n        } else if(this.props.mode == 'home') {\r\n            return <ServerInfo refreshHome={()=>{this.props.refreshHome()}} data={this.props.data.serverinfo}/>\r\n        } else {\r\n            return(<h1>unexpected</h1>)\r\n        }\r\n    }\r\n\r\n    getTxnObject(txmObject,count) {\r\n        return(<tr key={txmObject.txnId}>\r\n            <td>{count}</td>\r\n            <td>\r\n                {txmObject.txnId}\r\n            </td>\r\n            <td>\r\n                {txmObject.status}\r\n            </td>\r\n            <td>\r\n                <ul>\r\n                    <li>\r\n                        Module Name : {txmObject.remoteActionMessageBean.moduleName} \r\n                    </li>\r\n                    <li>\r\n                        Action : {txmObject.remoteActionMessageBean.actionName}\r\n                    </li>\r\n                    <li>\r\n                        Connection ID : {txmObject.remoteActionMessageBean.connectionId} \r\n                    </li>\r\n                    <li>\r\n                        Incoming Message : {JSON.stringify(txmObject.inbound)} \r\n                    </li>\r\n                    <li>\r\n                        Return Message : {JSON.stringify(txmObject.remoteActionMessageBean.message)} \r\n                    </li>\r\n                    <li>\r\n                        Sync Txn : {txmObject.remoteActionMessageBean.sync.toString()}\r\n                    </li>\r\n                    <li>\r\n                        User ID : {txmObject.remoteActionMessageBean.userId} \r\n                    </li>\r\n                    <li>\r\n                       Message Fate : {txmObject.remoteActionMessageBean.status} \r\n                    </li>\r\n                </ul>\r\n            </td>\r\n            <td>\r\n                <ul>\r\n                    <li>\r\n                        Start time : {txmObject.recievedTime} \r\n                    </li>\r\n                    <li>\r\n                        End time : {txmObject.processingCompleteTime}\r\n                    </li>\r\n                    <li>\r\n                        Processing duration : {txmObject.timeTookForProcessing} \r\n                    </li>\r\n                </ul>\r\n            </td>\r\n        </tr>);\r\n    }\r\n\r\n    getEventObject(eventobj,count) {\r\n      \r\n        return(\r\n        <tr key={JSON.stringify(eventobj)}>\r\n                {console.log(eventobj)}\r\n                <td>{count}</td>\r\n                <td>\r\n                    <i>\r\n                    {eventobj.split(':')[0]}\r\n                    </i>\r\n                </td>\r\n                <td>\r\n                    <i>\r\n                    {eventobj.split(':')[1]}\r\n                    </i>\r\n                </td>\r\n                <td>\r\n                    {eventobj.split(':')[2]}\r\n                </td>\r\n                <td>\r\n                    {this.inserLineBreak(eventobj.split(':')[3])}\r\n                </td>\r\n            </tr>);\r\n    }\r\n\r\n    inserLineBreak(methods) {\r\n        let rows = [];\r\n        for(let md of methods\r\n            .replaceAll('class','')\r\n            .replace('[','')\r\n            .replace(']','')\r\n            .split(',')) {\r\n            rows.push(<i>{md}</i>)\r\n            rows.push(<br/>)\r\n        }\r\n        return(rows);\r\n    }\r\n}\r\n\r\nexport default DataView","import React from 'react'\r\n\r\nclass Spinner extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n        console.log(this.props)\r\n        if(this.props.showloader) {\r\n            return(\r\n                <div className=\"text-center\">\r\n                    <div className=\"spinner-border text-danger\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n                );\r\n        } else {\r\n            return(<div></div>);\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default Spinner;","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport NavDropdown from 'react-bootstrap/NavDropdown'\r\nimport Spinner from './Spinner.js'\r\nclass Header extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render() {\r\n        return(\r\n            <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n               <Navbar.Brand href=\"#home\">CN Control Panel</Navbar.Brand>\r\n               <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n               <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                    <Nav.Link onClick={()=>this.props.homeClick()}>Home</Nav.Link>\r\n                    <NavDropdown title=\"Actions\" id=\"basic-nav-dropdown\">\r\n                        <NavDropdown.Item onClick={()=>this.props.avaliableEvents()}>Available Events</NavDropdown.Item>\r\n                        <NavDropdown.Item onClick={()=>this.props.transactionHistoryClick()}>Transaction history</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick={()=>this.props.logoutClick()}>Logout</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                <Spinner showloader={this.props.showloader}/>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header","import './App.css';\r\nimport React from 'react'\r\nimport DataView from './components/DataView.js'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Header from './components/Header.js'\r\nimport axios from 'axios';\r\n\r\nlet hostPrefix = '';\r\n\r\nclass App extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {transactions:[],\r\n                  screen:'home',\r\n                  availableEvents:[],\r\n                  serverinfo:[],\r\n                  showloader:true};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.homeClick();\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state)\r\n    return (\r\n      <div>\r\n        <Header \r\n        avaliableEvents={()=>this.avaliableEventsHandleClick()} \r\n        transactionHistoryClick={()=>this.transactionHistoryClick()}\r\n        homeClick={()=>{this.homeClick()}}\r\n        logoutClick={()=>{this.logoutClick()}}\r\n        showloader={this.state.showloader}/>\r\n      \r\n        <DataView data={this.state} \r\n        txn={this.state.transactions}\r\n        events={this.state.availableEvents}\r\n        mode={this.state.screen}\r\n        refreshHome={()=>{this.homeClick()}}/>\r\n\r\n      </div>\r\n      );\r\n  }\r\n\r\n  avaliableEventsHandleClick() {\r\n    this.setState({...this.state,showloader:true})\r\n    this.getAvailableEvents();\r\n    this.setState({...this.state,screen:'events',showloader:true})\r\n  }\r\n\r\n  homeClick() {\r\n    this.setState({...this.state,showloader:true})\r\n    this.getServerInfo();\r\n    this.setState({...this.state,screen:'home',showloader:true})\r\n  }\r\n\r\n  transactionHistoryClick() {\r\n    this.setState({...this.state,showloader:true})\r\n    this.getTransactionHistory();\r\n    this.setState({...this.state,screen:'txns',showloader:true})\r\n  }\r\n\r\n  logoutClick() {\r\n    this.logout();\r\n  }\r\n\r\n\r\n  logout() {\r\n    axios.get(hostPrefix+'/console_wp/logout')\r\n    .then(res => {\r\n      window.open(hostPrefix+'/console');\r\n    })\r\n  }\r\n\r\n  getTransactionHistory() {\r\n    axios.get(hostPrefix+'/console_wp/txnStatus')\r\n    .then(res => {\r\n      const transactions = res.data;\r\n      this.setState({...this.state,transactions:transactions,showloader:false});\r\n    })\r\n  }\r\n\r\n  getAvailableEvents() {\r\n    axios.get(hostPrefix+'/console_wp/availableEvents')\r\n    .then(res => {\r\n      const events = res.data;\r\n      this.setState({...this.state,availableEvents:events,showloader:false});\r\n    })\r\n  }\r\n\r\n  getServerInfo() {\r\n    axios.get(hostPrefix+'/console_wp/serverInfo')\r\n    .then(res => {\r\n      const info = res.data;\r\n      this.setState({...this.state,serverinfo:info,showloader:false});\r\n    })\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App value='tommy'/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}