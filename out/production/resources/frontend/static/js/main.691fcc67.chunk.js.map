{"version":3,"sources":["components/TransactionTable.js","components/ServerInfo.js","components/DataView.js","components/Spinner.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["TransactionTable","props","rows","values","Object","this","data","concat","sort","a","b","recievedTimeForDisplay","localeCompare","map","item","i","getTxnObject","length","push","colSpan","Container","fluid","Table","striped","bordered","hover","responsive","varient","txmObject","count","sourceServer","txnId","status","max-width","remoteActionMessageBean","moduleName","actionName","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","inbound","message","connectionId","sync","toString","userId","processingCompleteTimeForDisplay","timeTookForProcessing","React","Component","JSONDisplayer","obj","children","JSON","stringify","replace","ServerInfo","Jumbotron","onClick","refreshHome","CardDeck","style","minWidth","maxWidth","marginTop","Title","Text","className","title","DataView","mode","txn","cdr","events","entry","getEventObject","serverinfo","recievedTime","processingCompleteTime","eventobj","console","log","split","inserLineBreak","methods","replaceAll","md","Spinner","showloader","role","Navbar","bg","expand","Brand","href","aria-controls","id","Nav","Link","homeClick","NavDropdown","Item","avaliableEvents","transactionHistoryClick","Divider","logoutClick","App","state","transactions","screen","availableEvents","avaliableEventsHandleClick","setState","getAvailableEvents","getServerInfo","getTransactionHistory","logout","axios","get","then","res","window","open","info","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","value","document","getElementById"],"mappings":"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","file":"static/js/main.691fcc67.chunk.js","sourcesContent":["import React from 'react'\r\nimport Table from 'react-bootstrap/Table';\r\nimport { Container } from 'react-bootstrap';\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nclass TransactionTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n            let Y = 1;\r\n            let values = Object.values(this.props.data);\r\n            debugger;\r\n            rows = [].concat(values)\r\n            .sort((a, b) => a.recievedTimeForDisplay.localeCompare(b.recievedTimeForDisplay))\r\n            .map((item, i) => \r\n                this.getTxnObject(item, i+1)\r\n            );\r\n\r\n            if(rows.length==0) {\r\n                rows.push(<tr key='no_data'><td colSpan={5}><center>No data</center></td></tr>)\r\n            }\r\n\r\n        return(\r\n        <Container fluid>\r\n            <Table striped bordered hover responsive varient=\"dark\">\r\n                <thead>\r\n                    <tr key='title_1'>\r\n                    <th>#</th>\r\n                    <th>Source/Transaction ID</th>\r\n                    <th>Transaction Status</th>\r\n                    <th>Data</th>\r\n                    <th>Timing</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows}\r\n                </tbody>\r\n            </Table>\r\n        </Container>\r\n        );\r\n    }\r\n\r\n    getTxnObject(txmObject,count) {\r\n        return(<tr key={txmObject.txnId}>\r\n            <td>{count}</td>\r\n            <td>\r\n                {txmObject.sourceServer} <br/>/{txmObject.txnId}\r\n            </td>\r\n            <td>\r\n                {txmObject.status}\r\n            </td>\r\n            <td max-width=\"25%\">\r\n                <ul>\r\n                    <li>\r\n                        Module Name : {txmObject.remoteActionMessageBean.moduleName} \r\n                    </li>\r\n                    <li>\r\n                        Action : {txmObject.remoteActionMessageBean.actionName}\r\n                    </li>\r\n                </ul>\r\n                <Accordion defaultActiveKey=\"5\">\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                                    Incoming Message\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body><JSONDisplayer>{txmObject.inbound}</JSONDisplayer></Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                    Reply Message\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"1\">\r\n                                <Card.Body>\r\n                                    <JSONDisplayer>\r\n                                        {txmObject.remoteActionMessageBean.message}\r\n                                    </JSONDisplayer>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n\r\n                    <Accordion defaultActiveKey=\"5\">\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                                    Message info\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body>\r\n                                    <ul>\r\n \r\n                                        <li>\r\n                                            Connection ID : {txmObject.remoteActionMessageBean.connectionId} \r\n                                        </li>\r\n                                        <li>\r\n                                            Sync Txn : {txmObject.remoteActionMessageBean.sync.toString()}\r\n                                        </li>\r\n                                        <li>\r\n                                            User ID : {txmObject.remoteActionMessageBean.userId} \r\n                                        </li>\r\n                                        <li>\r\n                                        Message Fate : {txmObject.remoteActionMessageBean.status} \r\n                                        </li>\r\n                                    </ul>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n            </td>\r\n            <td>\r\n                <ul>\r\n                    <li>\r\n                        Start time : {txmObject.recievedTimeForDisplay} \r\n                    </li>\r\n                    <li>\r\n                        End time : {txmObject.processingCompleteTimeForDisplay}\r\n                    </li>\r\n                    <li>\r\n                        Processing duration : {txmObject.timeTookForProcessing} \r\n                    </li>\r\n                </ul>\r\n            </td>\r\n        </tr>);\r\n    }\r\n\r\n}\r\n\r\nconst getJsonIndented = (obj) => JSON.stringify(obj, null, 4).replace(/[\"{[,\\}\\]]/g, \"\")\r\n\r\nconst JSONDisplayer = ({children}) => (\r\n    <div>\r\n        <pre>{getJsonIndented(children)}</pre>\r\n    </div>\r\n)\r\n\r\n\r\nexport default TransactionTable;","import React from 'react'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport { Container } from 'react-bootstrap';\r\n\r\nclass ServerInfo extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Jumbotron>\r\n                    <h1>OCB Connector Server WS</h1>\r\n                    <p>\r\n                        This is the monitoring console of the CN server node.\r\n                    </p>\r\n                    <p>\r\n                        <Button variant=\"primary\" onClick={()=>{this.props.refreshHome()}}>Refresh</Button>\r\n                    </p>\r\n                </Jumbotron>\r\n                <Container fluid>\r\n                    <Card>\r\n                        <Card.Header>Quick Status</Card.Header>\r\n                        <Card.Body>\r\n                            <CardDeck>\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>VM Runtime</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['vmname']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>VM Vendor</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['vmvendor']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Runtime version</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['rtversion']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                                \r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Node name</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['nodename']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Process PID</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['vmpid']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>DB Pool name</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbpoolname']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>DB Max lifetime</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbmaxlifetime']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>DB pool max size</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbsize']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>DB active connections</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbactive']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>DB idle connections</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbidle']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Threads awaiting connections</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['dbawaiting']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Incoming m-queue size</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['inQSize']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Incoming m-queue remaing capacity</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['inQRemaining']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem',  marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Incoming m-queue size</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['outQSize']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n\r\n                                <Card style={{ minWidth: '18rem', maxWidth:'22rem', marginTop:'1rem'}}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Incoming m-queue remaing capacity</Card.Title>\r\n                                        <Card.Text>\r\n                                            {this.props.data['outQRemaining']}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n                                </Card>\r\n       \r\n                            </CardDeck>\r\n                            <footer className=\"blockquote-footer\">\r\n                                SAP SE <cite title=\"Source Title\">FSI</cite>\r\n                            </footer>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ServerInfo;","import React from 'react'\r\nimport { Container } from 'react-bootstrap';\r\nimport TransactionTable from './TransactionTable.js';\r\nimport Table from 'react-bootstrap/Table';\r\nimport ServerInfo from './ServerInfo.js'\r\n\r\nclass DataView extends React.Component {\r\nconstructor(props) {\r\n    super(props);\r\n}\r\n\r\n    render() {\r\n        if(this.props.mode == 'txns') {\r\n            return(<TransactionTable data={this.props.txn}/>);\r\n\r\n            /*let rows = [];\r\n            let i = 1;\r\n            for (let txnkey of Object.keys(this.props.txn)) {\r\n                rows.push(this.getTxnObject(this.props.txn[txnkey],i));\r\n                i++;\r\n            }\r\n            if(rows.length==0) {\r\n                rows.push(<tr key='no_data'><td colSpan={5}><center>No data</center></td></tr>)\r\n            }\r\n            \r\n            return(\r\n                <Container fluid>\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr key='title_1'>\r\n                            <th>#</th>\r\n                            <th>Transaction ID</th>\r\n                            <th>Transaction Status</th>\r\n                            <th>Data</th>\r\n                            <th>Timing</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {rows}\r\n                        </tbody>\r\n                    </Table>\r\n                </Container>\r\n            );*/\r\n        } else if(this.props.mode == 'events'){\r\n            let rows = [];\r\n            let i = 1;\r\n            var cdr = this.props.events.sort();\r\n            for (let entry of cdr) {\r\n                rows.push(this.getEventObject(entry,i));\r\n                i++;\r\n            }\r\n            return(\r\n            <Container fluid>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr key='title_2'>\r\n                            <th>#</th>\r\n                            <th>Event Module</th>\r\n                            <th>Event Action name</th>\r\n                            <th>Target class</th>\r\n                            <th>Arguments</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </Table>\r\n            </Container>);\r\n        } else if(this.props.mode == 'home') {\r\n            return <ServerInfo refreshHome={()=>{this.props.refreshHome()}} data={this.props.data.serverinfo}/>\r\n        } else {\r\n            return(<h1>unexpected</h1>)\r\n        }\r\n    }\r\n\r\n    getTxnObject(txmObject,count) {\r\n        return(<tr key={txmObject.txnId}>\r\n            <td>{count}</td>\r\n            <td>\r\n                {txmObject.txnId}\r\n            </td>\r\n            <td>\r\n                {txmObject.status}\r\n            </td>\r\n            <td>\r\n                <ul>\r\n                    <li>\r\n                        Module Name : {txmObject.remoteActionMessageBean.moduleName} \r\n                    </li>\r\n                    <li>\r\n                        Action : {txmObject.remoteActionMessageBean.actionName}\r\n                    </li>\r\n                    <li>\r\n                        Connection ID : {txmObject.remoteActionMessageBean.connectionId} \r\n                    </li>\r\n                    <li>\r\n                        Incoming Message : {JSON.stringify(txmObject.inbound)} \r\n                    </li>\r\n                    <li>\r\n                        Return Message : {JSON.stringify(txmObject.remoteActionMessageBean.message)} \r\n                    </li>\r\n                    <li>\r\n                        Sync Txn : {txmObject.remoteActionMessageBean.sync.toString()}\r\n                    </li>\r\n                    <li>\r\n                        User ID : {txmObject.remoteActionMessageBean.userId} \r\n                    </li>\r\n                    <li>\r\n                       Message Fate : {txmObject.remoteActionMessageBean.status} \r\n                    </li>\r\n                </ul>\r\n            </td>\r\n            <td>\r\n                <ul>\r\n                    <li>\r\n                        Start time : {txmObject.recievedTime} \r\n                    </li>\r\n                    <li>\r\n                        End time : {txmObject.processingCompleteTime}\r\n                    </li>\r\n                    <li>\r\n                        Processing duration : {txmObject.timeTookForProcessing} \r\n                    </li>\r\n                </ul>\r\n            </td>\r\n        </tr>);\r\n    }\r\n\r\n    getEventObject(eventobj,count) {\r\n      \r\n        return(\r\n        <tr key={JSON.stringify(eventobj)}>\r\n                {console.log(eventobj)}\r\n                <td>{count}</td>\r\n                <td>\r\n                    <i>\r\n                    {eventobj.split(':')[0]}\r\n                    </i>\r\n                </td>\r\n                <td>\r\n                    <i>\r\n                    {eventobj.split(':')[1]}\r\n                    </i>\r\n                </td>\r\n                <td>\r\n                    {eventobj.split(':')[2]}\r\n                </td>\r\n                <td>\r\n                    {this.inserLineBreak(eventobj.split(':')[3])}\r\n                </td>\r\n            </tr>);\r\n    }\r\n\r\n    inserLineBreak(methods) {\r\n        let rows = [];\r\n        for(let md of methods\r\n            .replaceAll('class','')\r\n            .replace('[','')\r\n            .replace(']','')\r\n            .split(',')) {\r\n            rows.push(<i>{md}</i>)\r\n            rows.push(<br/>)\r\n        }\r\n        return(rows);\r\n    }\r\n}\r\n\r\nexport default DataView","import React from 'react'\r\n\r\nclass Spinner extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n        console.log(this.props)\r\n        if(this.props.showloader) {\r\n            return(\r\n                <div className=\"text-center\">\r\n                    <div className=\"spinner-border text-danger\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n                );\r\n        } else {\r\n            return(<div></div>);\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default Spinner;","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport NavDropdown from 'react-bootstrap/NavDropdown'\r\nimport Spinner from './Spinner.js'\r\nclass Header extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render() {\r\n        return(\r\n            <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n               <Navbar.Brand href=\"#home\">CN Control Panel</Navbar.Brand>\r\n               <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n               <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                    <Nav.Link onClick={()=>this.props.homeClick()}>Home</Nav.Link>\r\n                    <NavDropdown title=\"Actions\" id=\"basic-nav-dropdown\">\r\n                        <NavDropdown.Item onClick={()=>this.props.avaliableEvents()}>Available Events</NavDropdown.Item>\r\n                        <NavDropdown.Item onClick={()=>this.props.transactionHistoryClick()}>Transaction history</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item onClick={()=>this.props.logoutClick()}>Logout</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                <Spinner showloader={this.props.showloader}/>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header","import './App.css';\nimport React from 'react'\nimport DataView from './components/DataView.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/Header.js'\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {transactions:[],\n                  screen:'home',\n                  availableEvents:[],\n                  serverinfo:[],\n                  showloader:true};\n  }\n\n  componentDidMount() {\n    this.homeClick();\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div>\n        <Header \n        avaliableEvents={()=>this.avaliableEventsHandleClick()} \n        transactionHistoryClick={()=>this.transactionHistoryClick()}\n        homeClick={()=>{this.homeClick()}}\n        logoutClick={()=>{this.logoutClick()}}\n        showloader={this.state.showloader}/>\n      \n        <DataView data={this.state} \n        txn={this.state.transactions}\n        events={this.state.availableEvents}\n        mode={this.state.screen}\n        refreshHome={()=>{this.homeClick()}}/>\n\n      </div>\n      );\n  }\n\n  avaliableEventsHandleClick() {\n    this.setState({...this.state,showloader:true})\n    this.getAvailableEvents();\n    this.setState({...this.state,screen:'events',showloader:true})\n  }\n\n  homeClick() {\n    this.setState({...this.state,showloader:true})\n    this.getServerInfo();\n    this.setState({...this.state,screen:'home',showloader:true})\n  }\n\n  transactionHistoryClick() {\n    this.setState({...this.state,showloader:true})\n    this.getTransactionHistory();\n    this.setState({...this.state,screen:'txns',showloader:true})\n  }\n\n  logoutClick() {\n    this.logout();\n  }\n\n\n  logout() {\n    axios.get('/console_wp/logout')\n    .then(res => {\n      window.open(\"/console\");\n    })\n  }\n\n  getTransactionHistory() {\n    axios.get('/console_wp/txnStatus')\n    .then(res => {\n      const transactions = res.data;\n      this.setState({...this.state,transactions:transactions,showloader:false});\n    })\n  }\n\n  getAvailableEvents() {\n    axios.get('/console_wp/availableEvents')\n    .then(res => {\n      const events = res.data;\n      this.setState({...this.state,availableEvents:events,showloader:false});\n    })\n  }\n\n  getServerInfo() {\n    axios.get('/console_wp/serverInfo')\n    .then(res => {\n      const info = res.data;\n      this.setState({...this.state,serverinfo:info,showloader:false});\n    })\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App value='tommy'/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}